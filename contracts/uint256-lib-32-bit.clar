(define-constant iter-buff-32 (keccak256 0))
(define-constant iter-buff-64 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
(define-constant iter-buff-256 0x
(define-constant iter-buff-768 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)
(define-constant iter-buff-test 0x00)
(define-constant uint32-max u4294967295)
(define-constant uint32-max-limit u4294967296)

(define-constant uint64-max u18446744073709551615)
(define-constant uint64-max-limit u18446744073709551616)

(define-constant uint256-zero (tuple (i0 u0) (i1 u0) (i2 u0) (i3 u0) (i4 u0) (i5 u0) (i6 u0) (i7 u0)))
(define-constant uint256-one  (tuple (i0 u0) (i1 u0) (i2 u0) (i3 u0) (i4 u0) (i5 u0) (i6 u0) (i7 u1)))

(define-constant ERR-OUT-OF-BOUNDS (err u1))

;; reads BE
(define-read-only (hex-to-uint256 (a (buff 32)))
  (ok
    (tuple
      (i0 (buff-to-uint-be (try! (read-varnum a u0 u4))))
      (i1 (buff-to-uint-be (try! (read-varnum a u4 u4))))
      (i2 (buff-to-uint-be (try! (read-varnum a u8 u4))))
      (i3 (buff-to-uint-be (try! (read-varnum a u12 u4))))
      (i4 (buff-to-uint-be (try! (read-varnum a u16 u4))))
      (i5 (buff-to-uint-be (try! (read-varnum a u20 u4))))
      (i6 (buff-to-uint-be (try! (read-varnum a u24 u4))))
      (i7 (buff-to-uint-be (try! (read-varnum a u28 u4))))
    )
  )
)

;; TODO: assert each val is < uint-32-max
(define-read-only (uint256-to-hex (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))))
  (ok
    (concat (concat (concat (concat (concat (concat (concat
      (uint32-to-hex (get i0 a))
      (uint32-to-hex (get i1 a)))
      (uint32-to-hex (get i2 a)))
      (uint32-to-hex (get i3 a)))
      (uint32-to-hex (get i4 a)))
      (uint32-to-hex (get i5 a)))
      (uint32-to-hex (get i6 a)))
      (uint32-to-hex (get i7 a)))
  )
)

(define-read-only (read-varnum (data (buff 32)) (offset uint) (size uint))
  (ok
    (unwrap! (as-max-len? (unwrap! (slice? data offset (+ offset size)) ERR-OUT-OF-BOUNDS) u4) ERR-OUT-OF-BOUNDS)
  )
)

(define-read-only (uint32-to-hex (a uint))
  (unwrap-panic (as-max-len? (unwrap-panic (slice? (unwrap-panic (to-consensus-buff? a)) u13 u17)) u4))
)

(define-read-only (carry (a uint))
  (if (> a uint32-max) (/ a uint32-max-limit) u0))

(define-read-only (uint-128-to-uint32 (a uint))
  (if (> (/ a uint32-max-limit) u0) (mod a uint32-max-limit) a))

(define-public (uint256-add (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                            (b (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))))
    (let ((i7 (+ (get i7 a) (get i7 b))))
    (let ((i6 (+ (get i6 a) (get i6 b) (carry i7)) ))
    (let ((i5 (+ (get i5 a) (get i5 b) (carry i6)) ))
    (let ((i4 (+ (get i4 a) (get i4 b) (carry i5)) ))
    (let ((i3 (+ (get i3 a) (get i3 b) (carry i4)) ))
    (let ((i2 (+ (get i2 a) (get i2 b) (carry i3)) ))
    (let ((i1 (+ (get i1 a) (get i1 b) (carry i2)) ))
    (let ((i0 (+ (get i0 a) (get i0 b) (carry i1)) ))
    (ok (tuple
          (i0 i0)
          (i1 (uint-128-to-uint32 i1))
          (i2 (uint-128-to-uint32 i2))
          (i3 (uint-128-to-uint32 i3))
          (i4 (uint-128-to-uint32 i4))
          (i5 (uint-128-to-uint32 i5))
          (i6 (uint-128-to-uint32 i6))
          (i7 (uint-128-to-uint32 i7))
        )))))))))))

(define-public (uint256-sub (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                            (b (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))))
    (let (
      (i (if (unwrap-panic (uint256> a b)) a b))
      (j (if (unwrap-panic (uint256> a b)) b a)))
        (let ((i7 (- (to-int (get i7 i)) (to-int (get i7 j)))))
        (let ((i6 (- (- (to-int (get i6 i)) (to-int (get i6 j))) (if (< i7 0) 1 0))))
        (let ((i5 (- (- (to-int (get i5 i)) (to-int (get i5 j))) (if (< i6 0) 1 0))))
        (let ((i4 (- (- (to-int (get i4 i)) (to-int (get i4 j))) (if (< i5 0) 1 0))))
        (let ((i3 (- (- (to-int (get i3 i)) (to-int (get i3 j))) (if (< i4 0) 1 0))))
        (let ((i2 (- (- (to-int (get i2 i)) (to-int (get i2 j))) (if (< i3 0) 1 0))))
        (let ((i1 (- (- (to-int (get i1 i)) (to-int (get i1 j))) (if (< i2 0) 1 0))))
        (let ((i0 (- (- (to-int (get i0 i)) (to-int (get i0 j))) (if (< i1 0) 1 0))))
        (ok (tuple (i0 (to-uint i0))
            (i1 (mod (to-uint (if (< i1 0) (+ (to-int uint32-max-limit) i1) i1)) uint32-max-limit))
            (i2 (mod (to-uint (if (< i2 0) (+ (to-int uint32-max-limit) i2) i2)) uint32-max-limit))
            (i3 (mod (to-uint (if (< i3 0) (+ (to-int uint32-max-limit) i3) i3)) uint32-max-limit))
            (i4 (mod (to-uint (if (< i4 0) (+ (to-int uint32-max-limit) i4) i4)) uint32-max-limit))
            (i5 (mod (to-uint (if (< i5 0) (+ (to-int uint32-max-limit) i5) i5)) uint32-max-limit))
            (i6 (mod (to-uint (if (< i6 0) (+ (to-int uint32-max-limit) i6) i6)) uint32-max-limit))
            (i7 (mod (to-uint (if (< i7 0) (+ (to-int uint32-max-limit) i7) i7)) uint32-max-limit))
            ))
          ))))))))
    ))

(define-public (uint256-rshift-overflow (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                               (b uint))
    (if (< b u128)
        (begin
            (let ((i7 (bit-shift-left (get i7 a) b)))
            (let ((i6 (+ (bit-shift-left (get i6 a) b) (carry i7) )))
            (let ((i5 (+ (bit-shift-left (get i5 a) b) (carry i6) )))
            (let ((i4 (+ (bit-shift-left (get i4 a) b) (carry i5) )))
            (let ((i3 (+ (bit-shift-left (get i3 a) b) (carry i4) )))
            (let ((i2 (+ (bit-shift-left (get i2 a) b) (carry i3) )))
            (let ((i1 (+ (bit-shift-left (get i1 a) b) (carry i2) )))
            (let ((i0 (+ (bit-shift-left (get i0 a) b) (carry i1) )))
            (ok (tuple
                (i0 i0)
                (i1 (uint-128-to-uint32 i1))
                (i2 (uint-128-to-uint32 i2))
                (i3 (uint-128-to-uint32 i3))
                (i4 (uint-128-to-uint32 i4))
                (i5 (uint-128-to-uint32 i5))
                (i6 (uint-128-to-uint32 i6))
                (i7 (uint-128-to-uint32 i7))
                )))))))))))
        (if (< b u256)
            (let ((r (- b u128)))
                    (let ((i3 (bit-shift-left (get i7 a) r)))
                    (let ((i2 (+ (bit-shift-left (get i6 a) r) (carry i3))))
                    (let ((i1 (+ (bit-shift-left (get i5 a) r) (carry i2))))
                    (let ((i0 (+ (bit-shift-left (get i4 a) r) (carry i1))))
                    (ok (tuple 
                        (i0 (uint-128-to-uint32 i0))
                        (i1 (uint-128-to-uint32 i1))
                        (i2 (uint-128-to-uint32 i2))
                        (i3 (uint-128-to-uint32 i3))
                        (i4 u0)
                        (i5 u0)
                        (i6 u0) 
                        (i7 u0)
                        )))))))
            (ok uint256-zero))
        ))

(define-public (uint256-cmp (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                            (b (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))))
    (ok (if (is-eq (get i0 a) (get i0 b))
          (if (is-eq (get i1 a) (get i1 b))
              (if (is-eq (get i2 a) (get i2 b))
                  (if (is-eq (get i3 a) (get i3 b))
                      (if (is-eq (get i4 a) (get i4 b))
                        (if (is-eq (get i5 a) (get i5 b))
                          (if (is-eq (get i6 a) (get i6 b))
                            (if (is-eq (get i7 a) (get i7 b))
                                0
                              (if (> (get i7 a) (get i7 b)) 1 -1)
                            )
                            (if (> (get i6 a) (get i6 b)) 1 -1)
                          )
                          (if (> (get i5 a) (get i5 b)) 1 -1)
                        )
                        (if (> (get i4 a) (get i4 b)) 1 -1)
                      )
                      (if (> (get i3 a) (get i3 b)) 1 -1)
                  )
                  (if (> (get i2 a) (get i2 b)) 1 -1)
                )
              (if (> (get i1 a) (get i1 b)) 1 -1)
            )
            (if (> (get i0 a) (get i0 b)) 1 -1)
        )
    )
)

;; verify b < u4294967295
(define-read-only (uint256-add-short (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                            (b uint))
    (uint256-add
      a
      (tuple
        (i0 u0)
        (i1 u0)
        (i2 u0)
        (i3 u0)
        (i4 (bit-and (bit-shift-right b u96) u4294967295))
        (i5 (bit-and (bit-shift-right b u64) u4294967295))
        (i6 (bit-and (bit-shift-right b u32) u4294967295))
        (i7 (bit-and b u4294967295)))
    )
)

(define-read-only (short-to-uint256 (b uint))
  (tuple
    (i0 u0)
    (i1 u0)
    (i2 u0)
    (i3 u0)
    (i4 (bit-and (bit-shift-right b u96) u4294967295))
    (i5 (bit-and (bit-shift-right b u64) u4294967295))
    (i6 (bit-and (bit-shift-right b u32) u4294967295))
    (i7 (bit-and b u4294967295))
  )
)

(define-public (uint256-check-bit (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))) (b uint))
  (if (> b u256) (err 1)
    (let ((v (if (is-eq (/ b u32) u7)
                (get i0 a)
                (if (is-eq (/ b u32) u6)
                  (get i1 a) 
                  (if (is-eq (/ b u32) u5)
                    (get i2 a)
                    (if (is-eq (/ b u32) u4)
                      (get i3 a)
                      (if (is-eq (/ b u32) u3)
                        (get i4 a)
                        (if (is-eq (/ b u32) u2)
                          (get i5 a)
                          (if (is-eq (/ b u32) u1)
                            (get i6 a)
                            (get i7 a)
                          )
                        )
                      )
                    )
                  )
                )
              )
            ))
      (ok (bit-and (bit-shift-right v (mod b u32)) u1))
  )))

(define-read-only (uint256-mul (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                            (b (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))))
        (let ((i11
                  (* (get i7 a) (get i7 b))
                ))
        (let ((i10 (+
                    (carry i11)
                    (* (get i7 a) (get i6 b))
                    (* (get i6 a) (get i7 b))
                  )))
        (let ((i9 (+
                    (carry i10)
                    (* (get i7 a) (get i5 b)) 
                    (* (get i6 a) (get i6 b))
                    (* (get i5 a) (get i7 b))
                  )))
        (let ((i8 (+
                    (carry i9)
                    (* (get i7 a) (get i4 b))
                    (* (get i6 a) (get i5 b))
                    (* (get i5 a) (get i6 b))
                    (* (get i4 a) (get i7 b))
                  )))
        (let ((i7 (+
                    (carry i8)
                    (* (get i7 a) (get i3 b))
                    (* (get i6 a) (get i4 b))
                    (* (get i5 a) (get i5 b))
                    (* (get i4 a) (get i6 b))
                  )))
        (let ((i6 (+
                    (carry i7)
                    (* (get i1 a) (get i0 b))
                    (* (get i0 a) (get i1 b))
                  )))
        (let ((i5 (+
                    (carry i6)
                    (* (get i0 a) (get i0 b))
                  )))
        (let ((i4 (carry i5)))
        (let ((i3 (carry i4)))
        (let ((i2 (carry i3)))
        (let ((i1 (carry i2)))
        (let ((i0 (carry i1)))
        (ok (tuple
            (i0 i0)
            (i1 (uint-128-to-uint32 i1))
            (i2 (uint-128-to-uint32 i2))
            (i3 (uint-128-to-uint32 i3))
            (i4 (uint-128-to-uint32 i4))
            (i5 (uint-128-to-uint32 i5))
            (i6 (uint-128-to-uint32 i6))
            (i7 (uint-128-to-uint32 i7))
            (i8 (uint-128-to-uint32 i8))
            (i9 (uint-128-to-uint32 i9))
            (i10 (uint-128-to-uint32 i10))
            (i11 (uint-128-to-uint32 i11))))
          )))))))))))))

(define-public (uint256< (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                            (b (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))))
    (ok (< (unwrap-panic (uint256-cmp a b)) 0)))

(define-public (uint256> (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                            (b (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))))
    (ok (> (unwrap-panic (uint256-cmp a b)) 0)))

(define-public (uint256-is-zero (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))))
  (ok
    (and
      (is-eq (get i0 a) u0)
      (is-eq (get i1 a) u0)
      (is-eq (get i2 a) u0)
      (is-eq (get i4 a) u0)
      (is-eq (get i5 a) u0)
      (is-eq (get i6 a) u0)
      (is-eq (get i7 a) u0)
    )
  )
)

(define-private (loop-div-iter (i (buff 1))
                                (val (tuple
                                  (p uint)
                                  (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                                  (b (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                                  (q (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                                  (r (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                                  )))
    (let ((t (unwrap-panic (uint256-rshift-overflow (get r val) u1))))
        (if (unwrap-panic (uint256< t (get b val)))
        (tuple 
            (p (+ (get p val) u1)) 
            (a (get a val)) 
            (b (get b val)) 
            (q (get q val))
            (r (unwrap-panic (uint256-add-short
                t 
                (unwrap-panic (uint256-check-bit (get a val) (- u255 (get p val))))))))
        (tuple
            (p (+ (get p val) u1))
            (a (get a val))
            (b (get b val))
            (q (unwrap-panic (uint256-add (get q val)
                (unwrap-panic (uint256-rshift-overflow uint256-one (- u255 (get p val)))))))
            (r (unwrap-panic (uint256-sub
                  (unwrap-panic (uint256-add-short
                    t
                    (unwrap-panic (uint256-check-bit (get a val) (- u255 (get p val))))))
                  (get b val))))
              ))))

(define-public (uint256-div (a (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint)))
                            (b (tuple (i0 uint) (i1 uint) (i2 uint) (i3 uint) (i4 uint) (i5 uint) (i6 uint) (i7 uint))))
    (if (unwrap-panic (uint256-is-zero b))
        (err 1)
        (ok (get q (fold loop-div-iter iter-buff-256 (tuple (p u0) (a a) (b b) (q uint256-zero) (r uint256-zero)))))))
